!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(self,(function(){return(()=>{"use strict";var e={413:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Controls=void 0;const r=n(614);t.Controls=class{constructor(e){e||(e=document.getElementById("controls-container")),this._controlsElement=document.createElement("form"),this._controlsElement.onsubmit=e=>(e.preventDefault(),!1),e.appendChild(this._controlsElement)}createGenericRangedInput(e,t,n="",r,o,a,i,c,s){const l=this.createGenericInput(e,t,n,o,s);return l.min=String(a),l.max=String(i),l.step=String(c),l.value=String(r),l}createLabel(e,t){const n=document.createElement("label");return n.htmlFor=t,n.innerText=e,this._controlsElement.appendChild(n),n}createDescription(e){const t=r.v4(),n=document.createElement("small");return n.className="form-text text-muted",n.innerText=e,n.id=t,this._controlsElement.appendChild(n),n}createInput(e,t,n,o){o||(o=r.v4()),e&&this.createLabel(e,o);const a=t();if(a.id=o,this._controlsElement.appendChild(a),n){const e=this.createDescription(n);a.setAttribute("aria-describedby",e.id)}return a}createActionButton(e,t,n){const r=this.createGenericInput(void 0,"button",void 0,t,n);return r.value=e,r.classList.add("btn"),r.classList.add("btn-primary"),r}createGenericInput(e,t="text",n="",r,o){return this.createInput(e,(()=>{const e=document.createElement("input");return e.id=o,e.className="form-control",e.type=t,e.placeholder=n,this._controlsElement.appendChild(e),e}),r,o)}createSelectListInput(e,t,n,r){return this.createInput(e,(()=>{const e=document.createElement("select");return e.id=r,e.className="form-control",this._controlsElement.appendChild(e),t.forEach((t=>{const n=document.createElement("option");n.innerHTML=t,e.appendChild(n)})),e}),n,r)}createTextInput(e,t="",n,r){return this.createGenericInput(e,"text",t,n,r)}createColorInput(e,t="",n,r){return this.createGenericInput(e,"color",t,n,r)}createNumberInput(e,t="",n,r,o,a,i,c){return this.createGenericRangedInput(e,"number",t,n,r,o,a,i,c)}createSliderInput(e,t="",n,r,o,a,i,c){const s=this.createGenericRangedInput(e,"range",t,n,r,o,a,i,c);return s.classList.add("custom-range"),s}createFileInput(e,t,n=!1,r="",o,a){const i=this.createGenericInput(e,"file",r,o,a);i.accept=t,i.multiple=n;const c=document.createElement("div");c.classList.add("fileInputWrapper"),i.parentElement.replaceChild(c,i);const s=this.createActionButton("Datei auswÃ¤hlen");return c.appendChild(s),c.appendChild(i),s.onclick=()=>i.click(),i.onchange=()=>{s.value=Array.from(i.files).map((e=>e.name)).join("; ")},i}}},614:(e,t,n)=>{var r;n.r(t),n.d(t,{NIL:()=>_,parse:()=>v,stringify:()=>u,v1:()=>m,v3:()=>x,v4:()=>S,v5:()=>T,validate:()=>c,version:()=>G});var o=new Uint8Array(16);function a(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(o)}const i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,c=function(e){return"string"==typeof e&&i.test(e)};for(var s=[],l=0;l<256;++l)s.push((l+256).toString(16).substr(1));const u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!c(n))throw TypeError("Stringified UUID is invalid");return n};var d,p,f=0,h=0;const m=function(e,t,n){var r=t&&n||0,o=t||new Array(16),i=(e=e||{}).node||d,c=void 0!==e.clockseq?e.clockseq:p;if(null==i||null==c){var s=e.random||(e.rng||a)();null==i&&(i=d=[1|s[0],s[1],s[2],s[3],s[4],s[5]]),null==c&&(c=p=16383&(s[6]<<8|s[7]))}var l=void 0!==e.msecs?e.msecs:Date.now(),m=void 0!==e.nsecs?e.nsecs:h+1,v=l-f+(m-h)/1e4;if(v<0&&void 0===e.clockseq&&(c=c+1&16383),(v<0||l>f)&&void 0===e.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=l,h=m,p=c;var g=(1e4*(268435455&(l+=122192928e5))+m)%4294967296;o[r++]=g>>>24&255,o[r++]=g>>>16&255,o[r++]=g>>>8&255,o[r++]=255&g;var y=l/4294967296*1e4&268435455;o[r++]=y>>>8&255,o[r++]=255&y,o[r++]=y>>>24&15|16,o[r++]=y>>>16&255,o[r++]=c>>>8|128,o[r++]=255&c;for(var b=0;b<6;++b)o[r+b]=i[b];return t||u(o)},v=function(e){if(!c(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};function g(e,t,n){function r(e,r,o,a){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=v(r)),16!==r.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var i=new Uint8Array(16+e.length);if(i.set(r),i.set(e,r.length),(i=n(i))[6]=15&i[6]|t,i[8]=63&i[8]|128,o){a=a||0;for(var c=0;c<16;++c)o[a+c]=i[c];return o}return u(i)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r}function y(e){return 14+(e+64>>>9<<4)+1}function b(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function I(e,t,n,r,o,a){return b((i=b(b(t,e),b(r,a)))<<(c=o)|i>>>32-c,n);var i,c}function w(e,t,n,r,o,a,i){return I(t&n|~t&r,e,t,o,a,i)}function C(e,t,n,r,o,a,i){return I(t&r|n&~r,e,t,o,a,i)}function E(e,t,n,r,o,a,i){return I(t^n^r,e,t,o,a,i)}function A(e,t,n,r,o,a,i){return I(n^(t|~r),e,t,o,a,i)}const x=g("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,r="0123456789abcdef",o=0;o<n;o+=8){var a=e[o>>5]>>>o%32&255,i=parseInt(r.charAt(a>>>4&15)+r.charAt(15&a),16);t.push(i)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[y(t)-1]=t;for(var n=1732584193,r=-271733879,o=-1732584194,a=271733878,i=0;i<e.length;i+=16){var c=n,s=r,l=o,u=a;n=w(n,r,o,a,e[i],7,-680876936),a=w(a,n,r,o,e[i+1],12,-389564586),o=w(o,a,n,r,e[i+2],17,606105819),r=w(r,o,a,n,e[i+3],22,-1044525330),n=w(n,r,o,a,e[i+4],7,-176418897),a=w(a,n,r,o,e[i+5],12,1200080426),o=w(o,a,n,r,e[i+6],17,-1473231341),r=w(r,o,a,n,e[i+7],22,-45705983),n=w(n,r,o,a,e[i+8],7,1770035416),a=w(a,n,r,o,e[i+9],12,-1958414417),o=w(o,a,n,r,e[i+10],17,-42063),r=w(r,o,a,n,e[i+11],22,-1990404162),n=w(n,r,o,a,e[i+12],7,1804603682),a=w(a,n,r,o,e[i+13],12,-40341101),o=w(o,a,n,r,e[i+14],17,-1502002290),n=C(n,r=w(r,o,a,n,e[i+15],22,1236535329),o,a,e[i+1],5,-165796510),a=C(a,n,r,o,e[i+6],9,-1069501632),o=C(o,a,n,r,e[i+11],14,643717713),r=C(r,o,a,n,e[i],20,-373897302),n=C(n,r,o,a,e[i+5],5,-701558691),a=C(a,n,r,o,e[i+10],9,38016083),o=C(o,a,n,r,e[i+15],14,-660478335),r=C(r,o,a,n,e[i+4],20,-405537848),n=C(n,r,o,a,e[i+9],5,568446438),a=C(a,n,r,o,e[i+14],9,-1019803690),o=C(o,a,n,r,e[i+3],14,-187363961),r=C(r,o,a,n,e[i+8],20,1163531501),n=C(n,r,o,a,e[i+13],5,-1444681467),a=C(a,n,r,o,e[i+2],9,-51403784),o=C(o,a,n,r,e[i+7],14,1735328473),n=E(n,r=C(r,o,a,n,e[i+12],20,-1926607734),o,a,e[i+5],4,-378558),a=E(a,n,r,o,e[i+8],11,-2022574463),o=E(o,a,n,r,e[i+11],16,1839030562),r=E(r,o,a,n,e[i+14],23,-35309556),n=E(n,r,o,a,e[i+1],4,-1530992060),a=E(a,n,r,o,e[i+4],11,1272893353),o=E(o,a,n,r,e[i+7],16,-155497632),r=E(r,o,a,n,e[i+10],23,-1094730640),n=E(n,r,o,a,e[i+13],4,681279174),a=E(a,n,r,o,e[i],11,-358537222),o=E(o,a,n,r,e[i+3],16,-722521979),r=E(r,o,a,n,e[i+6],23,76029189),n=E(n,r,o,a,e[i+9],4,-640364487),a=E(a,n,r,o,e[i+12],11,-421815835),o=E(o,a,n,r,e[i+15],16,530742520),n=A(n,r=E(r,o,a,n,e[i+2],23,-995338651),o,a,e[i],6,-198630844),a=A(a,n,r,o,e[i+7],10,1126891415),o=A(o,a,n,r,e[i+14],15,-1416354905),r=A(r,o,a,n,e[i+5],21,-57434055),n=A(n,r,o,a,e[i+12],6,1700485571),a=A(a,n,r,o,e[i+3],10,-1894986606),o=A(o,a,n,r,e[i+10],15,-1051523),r=A(r,o,a,n,e[i+1],21,-2054922799),n=A(n,r,o,a,e[i+8],6,1873313359),a=A(a,n,r,o,e[i+15],10,-30611744),o=A(o,a,n,r,e[i+6],15,-1560198380),r=A(r,o,a,n,e[i+13],21,1309151649),n=A(n,r,o,a,e[i+4],6,-145523070),a=A(a,n,r,o,e[i+11],10,-1120210379),o=A(o,a,n,r,e[i+2],15,718787259),r=A(r,o,a,n,e[i+9],21,-343485551),n=b(n,c),r=b(r,s),o=b(o,l),a=b(a,u)}return[n,r,o,a]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(y(t)),r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))})),S=function(e,t,n){var r=(e=e||{}).random||(e.rng||a)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var o=0;o<16;++o)t[n+o]=r[o];return t}return u(r)};function L(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function U(e,t){return e<<t|e>>>32-t}const T=g("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=[];for(var o=0;o<r.length;++o)e.push(r.charCodeAt(o))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var a=e.length/4+2,i=Math.ceil(a/16),c=new Array(i),s=0;s<i;++s){for(var l=new Uint32Array(16),u=0;u<16;++u)l[u]=e[64*s+4*u]<<24|e[64*s+4*u+1]<<16|e[64*s+4*u+2]<<8|e[64*s+4*u+3];c[s]=l}c[i-1][14]=8*(e.length-1)/Math.pow(2,32),c[i-1][14]=Math.floor(c[i-1][14]),c[i-1][15]=8*(e.length-1)&4294967295;for(var d=0;d<i;++d){for(var p=new Uint32Array(80),f=0;f<16;++f)p[f]=c[d][f];for(var h=16;h<80;++h)p[h]=U(p[h-3]^p[h-8]^p[h-14]^p[h-16],1);for(var m=n[0],v=n[1],g=n[2],y=n[3],b=n[4],I=0;I<80;++I){var w=Math.floor(I/20),C=U(m,5)+L(w,v,g,y)+b+t[w]+p[I]>>>0;b=y,y=g,g=U(v,30)>>>0,v=m,m=C}n[0]=n[0]+m>>>0,n[1]=n[1]+v>>>0,n[2]=n[2]+g>>>0,n[3]=n[3]+y>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),_="00000000-0000-0000-0000-000000000000",G=function(e){if(!c(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0});const t=n(413);window.addEventListener("load",(()=>{console.log("triangleInterpolation.ts");let e="#ff0000";const n=document.getElementById("svg-code"),r=document.getElementById("svg-preview"),a=document.getElementById("svg-controls"),i=new t.Controls(a).createColorInput("Color 1");i.value=e,i.addEventListener("input",(t=>{e=t.target.value,o(n,r,e)})),o(n,r,e)}));const o=(e,t,n)=>{const r=a(n);e.textContent=r,t.innerHTML=r},a=e=>(console.log("generateSVG()"),i(e)),i=e=>(console.log("generateBlurSVG()"),`\n<svg xmlns="http://www.w3.org/2000/svg" width="610" height="510">\n<defs>\n\n        <filter id="blur">\n            <feGaussianBlur in="SourceGraphic" stdDeviation="0.05" />\n        </filter>\n        <path id="triangle" fill="#000" d="M 0 0 h 1 l -0.5 0.866 Z"/>\n        <path id="segment" d="M 0.5 0.289 L 0.5 -0.577 L -1 -0.577 L -0.25 0.722 Z" />\n        <clipPath id="clipTri">\n            <use href="#triangle"/>\n        </clipPath>\n        <g id="segments">\n            <use href="#segment" fill="${e}"/>\n            <use href="#segment" fill="#0f0" transform="rotate(120 0.5 0.289)"/>\n            <use href="#segment" fill="#00f" transform="rotate(240 0.5 0.289)"/>\n        </g>\n    \n</defs>\n\n        <g id="colorTri" clip-path="url(#clipTri)" transform="scale(100)">\n            <g filter="url(#blur)">\n                <use href="#segments"/>\n            </g>\n        </g>\n    \n</svg>`)})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,