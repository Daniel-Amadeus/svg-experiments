!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(self,(function(){return(()=>{var e={414:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(413),i=r(n(465));window.addEventListener("load",(()=>{console.log("triangleInterpolation.ts");let e="#ff0000",t="#00ff00",n="#0000ff";const r=document.getElementById("svg-code"),i=document.getElementById("svg-preview"),a=document.getElementById("svg-controls"),s=new o.Controls(a),l=s.createColorInput("Color 1");l.value=e,l.addEventListener("input",(o=>{e=o.target.value,c(r,i,e,t,n)}));const u=s.createColorInput("Color 2");u.value=t,u.addEventListener("input",(o=>{t=o.target.value,c(r,i,e,t,n)}));const f=s.createColorInput("Color 3");f.value=n,f.addEventListener("input",(o=>{n=o.target.value,c(r,i,e,t,n)})),c(r,i,e,t,n)}));const c=(e,t,n,r,o)=>{const c=a(n,r,o);e.innerText=i.default(c),t.innerHTML=c},a=(e,t,n)=>(console.log("generateSVG()"),s(e,t,n)),s=(e,t,n)=>(console.log("generateBlurSVG()"),`\n<svg xmlns="http://www.w3.org/2000/svg" width="610" height="510">\n<defs>\n\n        <filter id="blur">\n            <feGaussianBlur in="SourceGraphic" stdDeviation="0.05" />\n        </filter>\n        <path id="triangle" fill="#000" d="M 0 0 h 1 l -0.5 0.866 Z"/>\n        <path id="segment" d="M 0.5 0.289 L 0.5 -0.577 L -1 -0.577 L -0.25 0.722 Z" />\n        <clipPath id="clipTri">\n            <use href="#triangle"/>\n        </clipPath>\n        <g id="segments">\n            <use href="#segment" fill="${e}"/>\n            <use href="#segment" fill="${t}" transform="rotate(120 0.5 0.289)"/>\n            <use href="#segment" fill="${n}" transform="rotate(240 0.5 0.289)"/>\n        </g>\n    \n</defs>\n\n        <g id="colorTri" clip-path="url(#clipTri)" transform="scale(100)">\n            <g filter="url(#blur)">\n                <use href="#segments"/>\n            </g>\n        </g>\n    \n</svg>`)},413:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Controls=void 0;const r=n(614);t.Controls=class{constructor(e){e||(e=document.getElementById("controls-container")),this._controlsElement=document.createElement("form"),this._controlsElement.onsubmit=e=>(e.preventDefault(),!1),e.appendChild(this._controlsElement)}createGenericRangedInput(e,t,n="",r,o,i,c,a,s){const l=this.createGenericInput(e,t,n,o,s);return l.min=String(i),l.max=String(c),l.step=String(a),l.value=String(r),l}createLabel(e,t){const n=document.createElement("label");return n.htmlFor=t,n.innerText=e,this._controlsElement.appendChild(n),n}createDescription(e){const t=r.v4(),n=document.createElement("small");return n.className="form-text text-muted",n.innerText=e,n.id=t,this._controlsElement.appendChild(n),n}createInput(e,t,n,o){o||(o=r.v4()),e&&this.createLabel(e,o);const i=t();if(i.id=o,this._controlsElement.appendChild(i),n){const e=this.createDescription(n);i.setAttribute("aria-describedby",e.id)}return i}createActionButton(e,t,n){const r=this.createGenericInput(void 0,"button",void 0,t,n);return r.value=e,r.classList.add("btn"),r.classList.add("btn-primary"),r}createGenericInput(e,t="text",n="",r,o){return this.createInput(e,(()=>{const e=document.createElement("input");return e.id=o,e.className="form-control",e.type=t,e.placeholder=n,this._controlsElement.appendChild(e),e}),r,o)}createSelectListInput(e,t,n,r){return this.createInput(e,(()=>{const e=document.createElement("select");return e.id=r,e.className="form-control",this._controlsElement.appendChild(e),t.forEach((t=>{const n=document.createElement("option");n.innerHTML=t,e.appendChild(n)})),e}),n,r)}createTextInput(e,t="",n,r){return this.createGenericInput(e,"text",t,n,r)}createColorInput(e,t="",n,r){return this.createGenericInput(e,"color",t,n,r)}createNumberInput(e,t="",n,r,o,i,c,a){return this.createGenericRangedInput(e,"number",t,n,r,o,i,c,a)}createSliderInput(e,t="",n,r,o,i,c,a){const s=this.createGenericRangedInput(e,"range",t,n,r,o,i,c,a);return s.classList.add("custom-range"),s}createFileInput(e,t,n=!1,r="",o,i){const c=this.createGenericInput(e,"file",r,o,i);c.accept=t,c.multiple=n;const a=document.createElement("div");a.classList.add("fileInputWrapper"),c.parentElement.replaceChild(a,c);const s=this.createActionButton("Datei auswÃ¤hlen");return a.appendChild(s),a.appendChild(c),s.onclick=()=>c.click(),c.onchange=()=>{s.value=Array.from(c.files).map((e=>e.name)).join("; ")},c}}},614:(e,t,n)=>{"use strict";var r;n.r(t),n.d(t,{NIL:()=>_,parse:()=>g,stringify:()=>u,v1:()=>m,v3:()=>S,v4:()=>A,v5:()=>U,validate:()=>a,version:()=>D});var o=new Uint8Array(16);function i(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(o)}const c=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,a=function(e){return"string"==typeof e&&c.test(e)};for(var s=[],l=0;l<256;++l)s.push((l+256).toString(16).substr(1));const u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n};var f,d,p=0,h=0;const m=function(e,t,n){var r=t&&n||0,o=t||new Array(16),c=(e=e||{}).node||f,a=void 0!==e.clockseq?e.clockseq:d;if(null==c||null==a){var s=e.random||(e.rng||i)();null==c&&(c=f=[1|s[0],s[1],s[2],s[3],s[4],s[5]]),null==a&&(a=d=16383&(s[6]<<8|s[7]))}var l=void 0!==e.msecs?e.msecs:Date.now(),m=void 0!==e.nsecs?e.nsecs:h+1,g=l-p+(m-h)/1e4;if(g<0&&void 0===e.clockseq&&(a=a+1&16383),(g<0||l>p)&&void 0===e.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");p=l,h=m,d=a;var v=(1e4*(268435455&(l+=122192928e5))+m)%4294967296;o[r++]=v>>>24&255,o[r++]=v>>>16&255,o[r++]=v>>>8&255,o[r++]=255&v;var y=l/4294967296*1e4&268435455;o[r++]=y>>>8&255,o[r++]=255&y,o[r++]=y>>>24&15|16,o[r++]=y>>>16&255,o[r++]=a>>>8|128,o[r++]=255&a;for(var b=0;b<6;++b)o[r+b]=c[b];return t||u(o)},g=function(e){if(!a(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};function v(e,t,n){function r(e,r,o,i){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=g(r)),16!==r.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var c=new Uint8Array(16+e.length);if(c.set(r),c.set(e,r.length),(c=n(c))[6]=15&c[6]|t,c[8]=63&c[8]|128,o){i=i||0;for(var a=0;a<16;++a)o[i+a]=c[a];return o}return u(c)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r}function y(e){return 14+(e+64>>>9<<4)+1}function b(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function w(e,t,n,r,o,i){return b((c=b(b(t,e),b(r,i)))<<(a=o)|c>>>32-a,n);var c,a}function I(e,t,n,r,o,i,c){return w(t&n|~t&r,e,t,o,i,c)}function E(e,t,n,r,o,i,c){return w(t&r|n&~r,e,t,o,i,c)}function C(e,t,n,r,o,i,c){return w(t^n^r,e,t,o,i,c)}function x(e,t,n,r,o,i,c){return w(n^(t|~r),e,t,o,i,c)}const S=v("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,r="0123456789abcdef",o=0;o<n;o+=8){var i=e[o>>5]>>>o%32&255,c=parseInt(r.charAt(i>>>4&15)+r.charAt(15&i),16);t.push(c)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[y(t)-1]=t;for(var n=1732584193,r=-271733879,o=-1732584194,i=271733878,c=0;c<e.length;c+=16){var a=n,s=r,l=o,u=i;n=I(n,r,o,i,e[c],7,-680876936),i=I(i,n,r,o,e[c+1],12,-389564586),o=I(o,i,n,r,e[c+2],17,606105819),r=I(r,o,i,n,e[c+3],22,-1044525330),n=I(n,r,o,i,e[c+4],7,-176418897),i=I(i,n,r,o,e[c+5],12,1200080426),o=I(o,i,n,r,e[c+6],17,-1473231341),r=I(r,o,i,n,e[c+7],22,-45705983),n=I(n,r,o,i,e[c+8],7,1770035416),i=I(i,n,r,o,e[c+9],12,-1958414417),o=I(o,i,n,r,e[c+10],17,-42063),r=I(r,o,i,n,e[c+11],22,-1990404162),n=I(n,r,o,i,e[c+12],7,1804603682),i=I(i,n,r,o,e[c+13],12,-40341101),o=I(o,i,n,r,e[c+14],17,-1502002290),n=E(n,r=I(r,o,i,n,e[c+15],22,1236535329),o,i,e[c+1],5,-165796510),i=E(i,n,r,o,e[c+6],9,-1069501632),o=E(o,i,n,r,e[c+11],14,643717713),r=E(r,o,i,n,e[c],20,-373897302),n=E(n,r,o,i,e[c+5],5,-701558691),i=E(i,n,r,o,e[c+10],9,38016083),o=E(o,i,n,r,e[c+15],14,-660478335),r=E(r,o,i,n,e[c+4],20,-405537848),n=E(n,r,o,i,e[c+9],5,568446438),i=E(i,n,r,o,e[c+14],9,-1019803690),o=E(o,i,n,r,e[c+3],14,-187363961),r=E(r,o,i,n,e[c+8],20,1163531501),n=E(n,r,o,i,e[c+13],5,-1444681467),i=E(i,n,r,o,e[c+2],9,-51403784),o=E(o,i,n,r,e[c+7],14,1735328473),n=C(n,r=E(r,o,i,n,e[c+12],20,-1926607734),o,i,e[c+5],4,-378558),i=C(i,n,r,o,e[c+8],11,-2022574463),o=C(o,i,n,r,e[c+11],16,1839030562),r=C(r,o,i,n,e[c+14],23,-35309556),n=C(n,r,o,i,e[c+1],4,-1530992060),i=C(i,n,r,o,e[c+4],11,1272893353),o=C(o,i,n,r,e[c+7],16,-155497632),r=C(r,o,i,n,e[c+10],23,-1094730640),n=C(n,r,o,i,e[c+13],4,681279174),i=C(i,n,r,o,e[c],11,-358537222),o=C(o,i,n,r,e[c+3],16,-722521979),r=C(r,o,i,n,e[c+6],23,76029189),n=C(n,r,o,i,e[c+9],4,-640364487),i=C(i,n,r,o,e[c+12],11,-421815835),o=C(o,i,n,r,e[c+15],16,530742520),n=x(n,r=C(r,o,i,n,e[c+2],23,-995338651),o,i,e[c],6,-198630844),i=x(i,n,r,o,e[c+7],10,1126891415),o=x(o,i,n,r,e[c+14],15,-1416354905),r=x(r,o,i,n,e[c+5],21,-57434055),n=x(n,r,o,i,e[c+12],6,1700485571),i=x(i,n,r,o,e[c+3],10,-1894986606),o=x(o,i,n,r,e[c+10],15,-1051523),r=x(r,o,i,n,e[c+1],21,-2054922799),n=x(n,r,o,i,e[c+8],6,1873313359),i=x(i,n,r,o,e[c+15],10,-30611744),o=x(o,i,n,r,e[c+6],15,-1560198380),r=x(r,o,i,n,e[c+13],21,1309151649),n=x(n,r,o,i,e[c+4],6,-145523070),i=x(i,n,r,o,e[c+11],10,-1120210379),o=x(o,i,n,r,e[c+2],15,718787259),r=x(r,o,i,n,e[c+9],21,-343485551),n=b(n,a),r=b(r,s),o=b(o,l),i=b(i,u)}return[n,r,o,i]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(y(t)),r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))})),A=function(e,t,n){var r=(e=e||{}).random||(e.rng||i)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var o=0;o<16;++o)t[n+o]=r[o];return t}return u(r)};function T(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function L(e,t){return e<<t|e>>>32-t}const U=v("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=[];for(var o=0;o<r.length;++o)e.push(r.charCodeAt(o))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var i=e.length/4+2,c=Math.ceil(i/16),a=new Array(c),s=0;s<c;++s){for(var l=new Uint32Array(16),u=0;u<16;++u)l[u]=e[64*s+4*u]<<24|e[64*s+4*u+1]<<16|e[64*s+4*u+2]<<8|e[64*s+4*u+3];a[s]=l}a[c-1][14]=8*(e.length-1)/Math.pow(2,32),a[c-1][14]=Math.floor(a[c-1][14]),a[c-1][15]=8*(e.length-1)&4294967295;for(var f=0;f<c;++f){for(var d=new Uint32Array(80),p=0;p<16;++p)d[p]=a[f][p];for(var h=16;h<80;++h)d[h]=L(d[h-3]^d[h-8]^d[h-14]^d[h-16],1);for(var m=n[0],g=n[1],v=n[2],y=n[3],b=n[4],w=0;w<80;++w){var I=Math.floor(w/20),E=L(m,5)+T(I,g,v,y)+b+t[I]+d[w]>>>0;b=y,y=v,v=L(g,30)>>>0,g=m,m=E}n[0]=n[0]+m>>>0,n[1]=n[1]+g>>>0,n[2]=n[2]+v>>>0,n[3]=n[3]+y>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),_="00000000-0000-0000-0000-000000000000",D=function(e){if(!a(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},465:(e,t,n)=>{function r(e){if(!e.options.indentation&&!e.options.lineSeparator)return;let t;for(e.content+=e.options.lineSeparator,t=0;t<e.level;t++)e.content+=e.options.indentation}function o(e,t){e.content+=t}function i(e,t,n){if("string"==typeof e.content)!function(e,t,n){n||(e.content=e.content.trim()),e.content.length>0&&(!n&&t.content.length>0&&r(t),o(t,e.content))}(e,t,n);else if("Element"===e.type)!function(e,t,n){if(!n&&t.content.length>0&&r(t),o(t,"<"+e.name),c(t,e.attributes),null===e.children){const e=t.options.whiteSpaceAtEndOfSelfclosingTag?" />":"/>";o(t,e)}else if(0===e.children.length)o(t,"></"+e.name+">");else{o(t,">"),t.level++;let c="preserve"===e.attributes["xml:space"];!c&&t.options.collapseContent&&e.children.some((function(e){return"Text"===e.type&&""!==e.content.trim()}))&&(c=!0),e.children.forEach((function(e){i(e,t,n||c,t.options)})),t.level--,n||c||r(t),o(t,"</"+e.name+">")}}(e,t,n);else{if("ProcessingInstruction"!==e.type)throw new Error("Unknown node type: "+e.type);a(e,t)}}function c(e,t){Object.keys(t).forEach((function(n){const r=t[n].replace(/"/g,"&quot;");o(e," "+n+'="'+r+'"')}))}function a(e,t){t.content.length>0&&r(t),o(t,"<?"+e.name),c(t,e.attributes),o(t,"?>")}e.exports=function(e,t={}){t.indentation="indentation"in t?t.indentation:"    ",t.collapseContent=!0===t.collapseContent,t.lineSeparator="lineSeparator"in t?t.lineSeparator:"\r\n",t.whiteSpaceAtEndOfSelfclosingTag=!!t.whiteSpaceAtEndOfSelfclosingTag;const r=n(121)(e,{filter:t.filter}),o={content:"",level:0,options:t};return r.declaration&&a(r.declaration,o),r.children.forEach((function(e){i(e,o,!1)})),o.content}},121:e=>{e.exports=function(e,t={}){function n(){return i()||function(){const e=s(/^([^<]+)/);if(e){const n={type:"Text",content:e[1]};return{excluded:!1===t.filter(n),node:n}}}()||c()||function(){if(e.startsWith("<![CDATA[")){const n=e.indexOf("]]>");if(n>-1){const r=n+3,o={type:"CDATA",content:e.substring(0,r)};return e=e.slice(r),{excluded:!1===t.filter(o),node:o}}}}()}function r(){return s(/\s*/),i(!0)||c()||function(){const e=s(/^<!DOCTYPE\s+[^>]*>/);if(e){const n={type:"DocumentType",content:e[0]};return{excluded:!1===t.filter(n),node:n}}}()||o(!1)}function o(e){const n=s(e?/^<\?(xml)\s*/:/^<\?([\w-:.]+)\s*/);if(!n)return;const r={name:n[1],type:"ProcessingInstruction",attributes:{}};for(;!l()&&!u("?>");){const e=a();if(!e)return r;r.attributes[e.name]=e.value}return s(/\?>/),{excluded:!e&&!1===t.filter(r),node:r}}function i(e){const r=s(/^<([\w-:.]+)\s*/);if(!r)return;const o={type:"Element",name:r[1],attributes:{},children:[]};for(;!(l()||u(">")||u("?>")||u("/>"));){const e=a();if(!e)return o;o.attributes[e.name]=e.value}const i=!e&&!1===t.filter(o);if(s(/^\s*\/>/))return o.children=null,{excluded:i,node:o};if(s(/\??>/),!i){let e=n();for(;e;)e.excluded||o.children.push(e.node),e=n()}return s(/^<\/[\w-:.]+>/),{excluded:i,node:o}}function c(){const e=s(/^<!--[\s\S]*?-->/);if(e){const n={type:"Comment",content:e[0]};return{excluded:!1===t.filter(n),node:n}}}function a(){const e=s(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/);var t;if(e)return{name:e[1],value:(t=e[2],t.replace(/^['"]|['"]$/g,""))}}function s(t){const n=e.match(t);if(n)return e=e.slice(n[0].length),n}function l(){return 0===e.length}function u(t){return 0===e.indexOf(t)}return t.filter=t.filter||(()=>!0),e=e.trim(),function(){const e=o(!0),t=[];let n,i=r();for(;i;){if("Element"===i.node.type){if(n)throw new Error("Found multiple root nodes");n=i.node}i.excluded||t.push(i.node),i=r()}if(!n)throw new Error("Failed to parse XML");return{declaration:e?e.node:null,root:n,children:t}}()}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}return n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(414)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,